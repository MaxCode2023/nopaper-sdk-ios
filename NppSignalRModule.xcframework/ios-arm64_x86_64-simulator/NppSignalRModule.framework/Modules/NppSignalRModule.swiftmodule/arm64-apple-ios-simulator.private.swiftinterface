// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NppSignalRModule
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AbSDKMain
import Alamofire
import Foundation
import NppCoreModule
import RxSwift
import Swift
import Swinject
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol HubConnectionDelegate : AnyObject {
  func connectionDidOpen(hubConnection: NppSignalRModule.HubConnection)
  func connectionDidFailToOpen(error: any Swift.Error)
  func connectionDidClose(error: (any Swift.Error)?)
  func connectionWillReconnect(error: any Swift.Error)
  func connectionDidReconnect()
}
extension NppSignalRModule.HubConnectionDelegate {
  public func connectionWillReconnect(error: any Swift.Error)
  public func connectionDidReconnect()
}
public class HubConnectionOptions {
  public var keepAliveInterval: Swift.Double?
  public var callbackQueue: Dispatch.DispatchQueue
  public init()
  @objc deinit
}
public enum EventSourceState {
  case connecting
  case open
  case closed
  public static func == (a: NppSignalRModule.EventSourceState, b: NppSignalRModule.EventSourceState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol EventSourceProtocol {
  var headers: [Swift.String : Swift.String] { get }
  var retryTime: Swift.Int { get }
  var url: Foundation.URL { get }
  var lastEventId: Swift.String? { get }
  var params: [Swift.String : Swift.String]? { get }
  var readyState: NppSignalRModule.EventSourceState { get }
  func connect(lastEventId: Swift.String?, params: [Swift.String : Swift.String]?)
  func disconnect()
  func events() -> [Swift.String]
  func onOpen(_ onOpenCallback: @escaping (() -> Swift.Void))
  func onComplete(_ onComplete: @escaping ((Swift.Int?, Swift.Bool?, Foundation.NSError?) -> Swift.Void))
  func onMessage(_ onMessageCallback: @escaping ((_ id: Swift.String?, _ event: Swift.String?, _ data: Swift.String?) -> Swift.Void))
  func addEventListener(_ event: Swift.String, handler: @escaping ((_ id: Swift.String?, _ event: Swift.String?, _ data: Swift.String?) -> Swift.Void))
  func removeEventListener(_ event: Swift.String)
}
@objc open class EventSource : ObjectiveC.NSObject, NppSignalRModule.EventSourceProtocol, Foundation.URLSessionDataDelegate {
  final public let url: Foundation.URL
  public var lastEventId: Swift.String? {
    get
  }
  public var params: [Swift.String : Swift.String]? {
    get
  }
  public var retryTime: Swift.Int {
    get
  }
  public var headers: [Swift.String : Swift.String] {
    get
  }
  public var readyState: NppSignalRModule.EventSourceState {
    get
  }
  public init(url: Foundation.URL, headers: [Swift.String : Swift.String] = [:])
  public func connect(lastEventId: Swift.String?, params: [Swift.String : Swift.String]? = [:])
  public func disconnect()
  public func onOpen(_ onOpenCallback: @escaping (() -> Swift.Void))
  public func onComplete(_ onComplete: @escaping ((Swift.Int?, Swift.Bool?, Foundation.NSError?) -> Swift.Void))
  public func onMessage(_ onMessageCallback: @escaping ((_ id: Swift.String?, _ event: Swift.String?, _ data: Swift.String?) -> Swift.Void))
  public func addEventListener(_ event: Swift.String, handler: @escaping ((_ id: Swift.String?, _ event: Swift.String?, _ data: Swift.String?) -> Swift.Void))
  public func removeEventListener(_ event: Swift.String)
  public func events() -> [Swift.String]
  @objc open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @objc open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc deinit
}
public enum ProtocolType : Swift.Int {
  case Text
  case Binary
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol HubProtocol {
  var name: Swift.String { get }
  var version: Swift.Int { get }
  var type: NppSignalRModule.ProtocolType { get }
  func parseMessages(input: Foundation.Data) throws -> [any NppSignalRModule.HubMessage]
  func writeMessage(message: any NppSignalRModule.HubMessage) throws -> Foundation.Data
}
public enum MessageType : Swift.Int, Swift.Codable {
  case Invocation
  case StreamItem
  case Completion
  case StreamInvocation
  case CancelInvocation
  case Ping
  case Close
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol HubMessage {
  var type: NppSignalRModule.MessageType { get }
}
@_hasMissingDesignatedInitializers public class ServerInvocationMessage : NppSignalRModule.HubMessage, Swift.Encodable {
  final public let type: NppSignalRModule.MessageType
  final public let invocationId: Swift.String?
  final public let target: Swift.String
  final public let arguments: [any Swift.Encodable]
  final public let streamIds: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public class ClientInvocationMessage : NppSignalRModule.HubMessage, Swift.Decodable {
  final public let type: NppSignalRModule.MessageType
  final public let target: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  public func getArgument<T>(type: T.Type) throws -> T where T : Swift.Decodable
  @objc deinit
}
public class StreamItemMessage : NppSignalRModule.HubMessage, Swift.Codable {
  final public let type: NppSignalRModule.MessageType
  final public let invocationId: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  public init(invocationId: Swift.String, item: any Swift.Encodable)
  public func getItem<T>(_ type: T.Type) throws -> T where T : Swift.Decodable
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public class CompletionMessage : NppSignalRModule.HubMessage, Swift.Codable {
  final public let type: NppSignalRModule.MessageType
  final public let invocationId: Swift.String
  final public let error: Swift.String?
  final public let hasResult: Swift.Bool
  required public init(from decoder: any Swift.Decoder) throws
  public init(invocationId: Swift.String, error: Swift.String?)
  public func getResult<T>(_ type: T.Type) throws -> T? where T : Swift.Decodable
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StreamInvocationMessage : NppSignalRModule.HubMessage, Swift.Encodable {
  final public let type: NppSignalRModule.MessageType
  final public let invocationId: Swift.String
  final public let target: Swift.String
  final public let arguments: [any Swift.Encodable]
  final public let streamIds: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CancelInvocationMessage : NppSignalRModule.HubMessage, Swift.Encodable {
  final public let type: NppSignalRModule.MessageType
  final public let invocationId: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class PingMessage : NppSignalRModule.HubMessage, Swift.Encodable {
  final public let type: NppSignalRModule.MessageType
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class CloseMessage : NppSignalRModule.HubMessage, Swift.Decodable {
  public var type: NppSignalRModule.MessageType {
    get
  }
  final public let error: Swift.String?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol HttpClientProtocol {
  func get(url: Foundation.URL, completionHandler: @escaping (NppSignalRModule.HttpResponse?, (any Swift.Error)?) -> Swift.Void)
  func post(url: Foundation.URL, body: Foundation.Data?, completionHandler: @escaping (NppSignalRModule.HttpResponse?, (any Swift.Error)?) -> Swift.Void)
  func delete(url: Foundation.URL, completionHandler: @escaping (NppSignalRModule.HttpResponse?, (any Swift.Error)?) -> Swift.Void)
  func getEventSource(url: Foundation.URL) -> NppSignalRModule.EventSource
}
@_hasMissingDesignatedInitializers public class LongPollingTransport : NppSignalRModule.Transport {
  public var delegate: (any NppSignalRModule.TransportDelegate)?
  final public let inherentKeepAlive: Swift.Bool
  public func start(url: Foundation.URL, options: NppSignalRModule.HttpConnectionOptions)
  public func send(data: Foundation.Data, sendDidComplete: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func close()
  @objc deinit
}
public protocol Connection {
  var delegate: (any NppSignalRModule.ConnectionDelegate)? { get set }
  var inherentKeepAlive: Swift.Bool { get }
  var connectionId: Swift.String? { get }
  func start()
  func send(data: Foundation.Data, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  func stop(stopError: (any Swift.Error)?)
}
public class HubConnectionBuilder {
  public init(url: Foundation.URL)
  public func withHubProtocol(hubProtocolFactory: @escaping (any NppSignalRModule.Logger) -> any NppSignalRModule.HubProtocol) -> NppSignalRModule.HubConnectionBuilder
  public func withHttpConnectionOptions(configureHttpOptions: (_ httpConnectionOptions: NppSignalRModule.HttpConnectionOptions) -> Swift.Void) -> NppSignalRModule.HubConnectionBuilder
  public func withHubConnectionOptions(configureHubConnectionOptions: (_ hubConnectionOptions: NppSignalRModule.HubConnectionOptions) -> Swift.Void) -> NppSignalRModule.HubConnectionBuilder
  public func withLogging(minLogLevel: NppSignalRModule.LogLevel) -> NppSignalRModule.HubConnectionBuilder
  public func withLogging(logger: any NppSignalRModule.Logger) -> NppSignalRModule.HubConnectionBuilder
  public func withLogging(minLogLevel: NppSignalRModule.LogLevel, logger: any NppSignalRModule.Logger) -> NppSignalRModule.HubConnectionBuilder
  public func withHubConnectionDelegate(delegate: any NppSignalRModule.HubConnectionDelegate) -> NppSignalRModule.HubConnectionBuilder
  public func withAutoReconnect(reconnectPolicy: any NppSignalRModule.ReconnectPolicy = DefaultReconnectPolicy()) -> NppSignalRModule.HubConnectionBuilder
  public func withPermittedTransportTypes(_ permittedTransportTypes: NppSignalRModule.TransportType) -> NppSignalRModule.HubConnectionBuilder
  public func build() -> NppSignalRModule.HubConnection
  @objc deinit
}
extension NppSignalRModule.HubConnectionBuilder {
  public func withJSONHubProtocol() -> NppSignalRModule.HubConnectionBuilder
}
@_hasMissingDesignatedInitializers public class StreamHandle {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HttpConnection : NppSignalRModule.Connection {
  weak public var delegate: (any NppSignalRModule.ConnectionDelegate)?
  public var connectionId: Swift.String? {
    get
  }
  public var inherentKeepAlive: Swift.Bool {
    get
  }
  convenience public init(url: Foundation.URL, options: NppSignalRModule.HttpConnectionOptions = HttpConnectionOptions(), logger: any NppSignalRModule.Logger = NullLogger())
  @objc deinit
  public func start()
  public func send(data: Foundation.Data, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func stop(stopError: (any Swift.Error)? = nil)
}
@_hasMissingDesignatedInitializers public class ConnectionTransportDelegate : NppSignalRModule.TransportDelegate {
  public func transportDidOpen()
  public func transportDidReceiveData(_ data: Foundation.Data)
  public func transportDidClose(_ error: (any Swift.Error)?)
  @objc deinit
}
public protocol TransportDelegate : AnyObject {
  func transportDidOpen()
  func transportDidReceiveData(_ data: Foundation.Data)
  func transportDidClose(_ error: (any Swift.Error)?)
}
public enum LogLevel : Swift.Int {
  case error
  case warning
  case info
  case debug
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol Logger {
  func log(logLevel: NppSignalRModule.LogLevel, message: @autoclosure () -> Swift.String)
}
extension NppSignalRModule.LogLevel {
  public func toString() -> Swift.String
}
public class PrintLogger : NppSignalRModule.Logger {
  public init()
  public func log(logLevel: NppSignalRModule.LogLevel, message: @autoclosure () -> Swift.String)
  @objc deinit
}
public class NullLogger : NppSignalRModule.Logger {
  public init()
  public func log(logLevel: NppSignalRModule.LogLevel, message: @autoclosure () -> Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ServerSentEventsTransport : NppSignalRModule.Transport {
  public var delegate: (any NppSignalRModule.TransportDelegate)?
  final public let inherentKeepAlive: Swift.Bool
  public func start(url: Foundation.URL, options: NppSignalRModule.HttpConnectionOptions)
  public func send(data: Foundation.Data, sendDidComplete: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func close()
  @objc deinit
}
@objc public class SignalR : ObjectiveC.NSObject {
  public var assemblies: [any Swinject.Assembly]
  public init(parentAssembler: Swinject.Assembler)
  @objc deinit
}
open class SignalRAssembly : Swinject.Assembly {
  public init()
  public func assemble(container: Swinject.Container)
  @objc deinit
}
extension NppSignalRModule.HubConnection {
  public func invoke(method: Swift.String, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func invoke<T1>(method: Swift.String, _ arg1: T1, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) where T1 : Swift.Encodable
  public func invoke<T1, T2>(method: Swift.String, _ arg1: T1, _ arg2: T2, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable
  public func invoke<T1, T2, T3>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable
  public func invoke<T1, T2, T3, T4>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable
  public func invoke<T1, T2, T3, T4, T5>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable
  public func invoke<T1, T2, T3, T4, T5, T6>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable
  public func invoke<T1, T2, T3, T4, T5, T6, T7>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, T7 : Swift.Encodable
  public func invoke<T1, T2, T3, T4, T5, T6, T7, T8>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, _ arg8: T8, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, T7 : Swift.Encodable, T8 : Swift.Encodable
  public func invoke<TRes>(method: Swift.String, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where TRes : Swift.Decodable
  public func invoke<T1, TRes>(method: Swift.String, _ arg1: T1, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where T1 : Swift.Encodable, TRes : Swift.Decodable
  public func invoke<T1, T2, TRes>(method: Swift.String, _ arg1: T1, _ arg2: T2, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, TRes : Swift.Decodable
  public func invoke<T1, T2, T3, TRes>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, TRes : Swift.Decodable
  public func invoke<T1, T2, T3, T4, TRes>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, TRes : Swift.Decodable
  public func invoke<T1, T2, T3, T4, T5, TRes>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, TRes : Swift.Decodable
  public func invoke<T1, T2, T3, T4, T5, T6, TRes>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, TRes : Swift.Decodable
  public func invoke<T1, T2, T3, T4, T5, T6, T7, TRes>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, T7 : Swift.Encodable, TRes : Swift.Decodable
  public func invoke<T1, T2, T3, T4, T5, T6, T7, T8, TRes>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, _ arg8: T8, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, T7 : Swift.Encodable, T8 : Swift.Encodable, TRes : Swift.Decodable
  public func send(method: Swift.String, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = {_ in})
  public func send<T1>(method: Swift.String, _ arg1: T1, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = {_ in}) where T1 : Swift.Encodable
  public func send<T1, T2>(method: Swift.String, _ arg1: T1, _ arg2: T2, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = {_ in}) where T1 : Swift.Encodable, T2 : Swift.Encodable
  public func send<T1, T2, T3>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = {_ in}) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable
  public func send<T1, T2, T3, T4>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = {_ in}) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable
  public func send<T1, T2, T3, T4, T5>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = {_ in}) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable
  public func send<T1, T2, T3, T4, T5, T6>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = {_ in}) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable
  public func send<T1, T2, T3, T4, T5, T6, T7>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = {_ in}) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, T7 : Swift.Encodable
  public func send<T1, T2, T3, T4, T5, T6, T7, T8>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, _ arg8: T8, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = {_ in}) where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, T7 : Swift.Encodable, T8 : Swift.Encodable
  public func on(method: Swift.String, callback: @escaping () -> Swift.Void)
  public func on<T1>(method: Swift.String, callback: @escaping (_ arg1: T1) -> Swift.Void) where T1 : Swift.Decodable
  public func on<T1, T2>(method: Swift.String, callback: @escaping (_ arg1: T1, _ arg2: T2) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable
  public func on<T1, T2, T3>(method: Swift.String, callback: @escaping (_ arg1: T1, _ arg2: T2, _ arg3: T3) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable
  public func on<T1, T2, T3, T4>(method: Swift.String, callback: @escaping (_ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable, T4 : Swift.Decodable
  public func on<T1, T2, T3, T4, T5>(method: Swift.String, callback: @escaping (_ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable, T4 : Swift.Decodable, T5 : Swift.Decodable
  public func on<T1, T2, T3, T4, T5, T6>(method: Swift.String, callback: @escaping (_ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable, T4 : Swift.Decodable, T5 : Swift.Decodable, T6 : Swift.Decodable
  public func on<T1, T2, T3, T4, T5, T6, T7>(method: Swift.String, callback: @escaping (_ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable, T4 : Swift.Decodable, T5 : Swift.Decodable, T6 : Swift.Decodable, T7 : Swift.Decodable
  public func on<T1, T2, T3, T4, T5, T6, T7, T8>(method: Swift.String, callback: @escaping (_ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, _ arg8: T8) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable, T4 : Swift.Decodable, T5 : Swift.Decodable, T6 : Swift.Decodable, T7 : Swift.Decodable, T8 : Swift.Decodable
  public func stream<TItemType>(method: Swift.String, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> NppSignalRModule.StreamHandle where TItemType : Swift.Decodable
  public func stream<T1, TItemType>(method: Swift.String, _ arg1: T1, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> NppSignalRModule.StreamHandle where T1 : Swift.Encodable, TItemType : Swift.Decodable
  public func stream<T1, T2, TItemType>(method: Swift.String, _ arg1: T1, _ arg2: T2, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> NppSignalRModule.StreamHandle where T1 : Swift.Encodable, T2 : Swift.Encodable, TItemType : Swift.Decodable
  public func stream<T1, T2, T3, TItemType>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> NppSignalRModule.StreamHandle where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, TItemType : Swift.Decodable
  public func stream<T1, T2, T3, T4, TItemType>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> NppSignalRModule.StreamHandle where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, TItemType : Swift.Decodable
  public func stream<T1, T2, T3, T4, T5, TItemType>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> NppSignalRModule.StreamHandle where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, TItemType : Swift.Decodable
  public func stream<T1, T2, T3, T4, T5, T6, TItemType>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> NppSignalRModule.StreamHandle where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, TItemType : Swift.Decodable
  public func stream<T1, T2, T3, T4, T5, T6, T7, TItemType>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> NppSignalRModule.StreamHandle where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, T7 : Swift.Encodable, TItemType : Swift.Decodable
  public func stream<T1, T2, T3, T4, T5, T6, T7, T8, TItemType>(method: Swift.String, _ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, _ arg8: T8, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> NppSignalRModule.StreamHandle where T1 : Swift.Encodable, T2 : Swift.Encodable, T3 : Swift.Encodable, T4 : Swift.Encodable, T5 : Swift.Encodable, T6 : Swift.Encodable, T7 : Swift.Encodable, T8 : Swift.Encodable, TItemType : Swift.Decodable
}
public class HttpConnectionOptions {
  public var headers: [Swift.String : Swift.String]
  public var accessTokenProvider: () -> Swift.String?
  public var httpClientFactory: (NppSignalRModule.HttpConnectionOptions) -> any NppSignalRModule.HttpClientProtocol
  public var skipNegotiation: Swift.Bool {
    get
    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    set
  }
  public var requestTimeout: Swift.Double
  public var authenticationChallengeHandler: ((_ session: Foundation.URLSession, _ challenge: Foundation.URLAuthenticationChallenge, _ completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void)?
  public var callbackQueue: Dispatch.DispatchQueue
  public init()
  @objc deinit
}
public class JSONHubProtocol : NppSignalRModule.HubProtocol {
  final public let name: Swift.String
  final public let version: Swift.Int
  final public let type: NppSignalRModule.ProtocolType
  public init(logger: any NppSignalRModule.Logger, encoder: Foundation.JSONEncoder = JSONEncoder(), decoder: Foundation.JSONDecoder = JSONDecoder())
  public func parseMessages(input: Foundation.Data) throws -> [any NppSignalRModule.HubMessage]
  public func createHubMessage(payload: Foundation.Data) throws -> any NppSignalRModule.HubMessage
  public func writeMessage(message: any NppSignalRModule.HubMessage) throws -> Foundation.Data
  @objc deinit
}
public enum SignalRError : Swift.Error {
  case invalidState
  case webError(statusCode: Swift.Int)
  case hubInvocationError(message: Swift.String)
  case hubInvocationCancelled
  case unknownMessageType
  case invalidMessage
  case unsupportedType
  case serializationError(underlyingError: any Swift.Error)
  case connectionIsBeingClosed
  case invalidOperation(message: Swift.String)
  case protocolViolation(underlyingError: any Swift.Error)
  case handshakeError(message: Swift.String)
  case invalidNegotiationResponse(message: Swift.String)
  case serverClose(message: Swift.String?)
  case noSupportedTransportAvailable
  case connectionIsReconnecting
}
public struct TransportType : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let longPolling: NppSignalRModule.TransportType
  public static let serverSentEvents: NppSignalRModule.TransportType
  public static let webSockets: NppSignalRModule.TransportType
  public static let all: NppSignalRModule.TransportType
  public typealias ArrayLiteralElement = NppSignalRModule.TransportType
  public typealias Element = NppSignalRModule.TransportType
  public typealias RawValue = Swift.Int
}
public enum TransferFormat : Swift.String {
  case text
  case binary
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol SignalRInteractor {
  func start(token: Swift.String)
  func watchOutdoingMessage<T>(_ dataType: T.Type) -> RxSwift.Observable<T> where T : Swift.Decodable
  func watchPrintFormChangeStatus<T>(_ dataType: T.Type) -> RxSwift.Observable<T> where T : Swift.Decodable
  func watchDocumentChangeStatus<T>(_ dataType: T.Type) -> RxSwift.Observable<T> where T : Swift.Decodable
  func watchSigningPartyChangeStatus<T>(_ dataType: T.Type) -> RxSwift.Observable<T> where T : Swift.Decodable
  func watchSigningPartyChanged<T>(_ dataType: T.Type) -> RxSwift.Observable<T> where T : Swift.Decodable
  func watchDocumentComment<T>(_ dataType: T.Type) -> RxSwift.Observable<T> where T : Swift.Decodable
}
public class HttpResponse {
  public init(statusCode: Swift.Int, contents: Foundation.Data?)
  @objc deinit
}
public struct RetryContext {
  public let failedAttemptsCount: Swift.Int
  public let reconnectStartTime: Foundation.Date
  public let error: any Swift.Error
}
public protocol ReconnectPolicy {
  func nextAttemptInterval(retryContext: NppSignalRModule.RetryContext) -> Dispatch.DispatchTimeInterval
}
public class DefaultReconnectPolicy : NppSignalRModule.ReconnectPolicy {
  public init(retryIntervals: [Dispatch.DispatchTimeInterval] = [.milliseconds(0), .seconds(2), .seconds(10), .seconds(30)])
  public func nextAttemptInterval(retryContext: NppSignalRModule.RetryContext) -> Dispatch.DispatchTimeInterval
  @objc deinit
}
public protocol ConnectionDelegate : AnyObject {
  func connectionDidOpen(connection: any NppSignalRModule.Connection)
  func connectionDidFailToOpen(error: any Swift.Error)
  func connectionDidReceiveData(connection: any NppSignalRModule.Connection, data: Foundation.Data)
  func connectionDidClose(error: (any Swift.Error)?)
  func connectionWillReconnect(error: any Swift.Error)
  func connectionDidReconnect()
}
extension NppSignalRModule.ConnectionDelegate {
  public func connectionWillReconnect(error: any Swift.Error)
  public func connectionDidReconnect()
}
public class HubConnection {
  weak public var delegate: (any NppSignalRModule.HubConnectionDelegate)?
  public var connectionId: Swift.String? {
    get
  }
  convenience public init(connection: any NppSignalRModule.Connection, hubProtocol: any NppSignalRModule.HubProtocol, logger: any NppSignalRModule.Logger = NullLogger())
  public init(connection: any NppSignalRModule.Connection, hubProtocol: any NppSignalRModule.HubProtocol, hubConnectionOptions: NppSignalRModule.HubConnectionOptions, logger: any NppSignalRModule.Logger = NullLogger())
  @objc deinit
  public func start()
  public func stop()
  public func on(method: Swift.String, callback: @escaping (_ argumentExtractor: NppSignalRModule.ArgumentExtractor) throws -> Swift.Void)
  public func send(method: Swift.String, arguments: [any Swift.Encodable], sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func invoke(method: Swift.String, arguments: [any Swift.Encodable], invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func invoke<T>(method: Swift.String, arguments: [any Swift.Encodable], resultType: T.Type, invocationDidComplete: @escaping (_ result: T?, _ error: (any Swift.Error)?) -> Swift.Void) where T : Swift.Decodable
  public func stream<T>(method: Swift.String, arguments: [any Swift.Encodable], streamItemReceived: @escaping (_ item: T) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> NppSignalRModule.StreamHandle where T : Swift.Decodable
  public func cancelStreamInvocation(streamHandle: NppSignalRModule.StreamHandle, cancelDidFail: @escaping (_ error: any Swift.Error) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class ArgumentExtractor {
  public func getArgument<T>(type: T.Type) throws -> T where T : Swift.Decodable
  public func hasMoreArgs() -> Swift.Bool
  @objc deinit
}
public protocol Transport : AnyObject {
  var delegate: (any NppSignalRModule.TransportDelegate)? { get set }
  var inherentKeepAlive: Swift.Bool { get }
  func start(url: Foundation.URL, options: NppSignalRModule.HttpConnectionOptions)
  func send(data: Foundation.Data, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  func close()
}
@objc @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
public class WebsocketsTransport : ObjectiveC.NSObject, NppSignalRModule.Transport, Foundation.URLSessionWebSocketDelegate {
  public var delegate: (any NppSignalRModule.TransportDelegate)?
  final public let inherentKeepAlive: Swift.Bool
  public func start(url: Foundation.URL, options: NppSignalRModule.HttpConnectionOptions)
  public func send(data: Foundation.Data, sendDidComplete: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func close()
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didOpenWithProtocol protocol: Swift.String?)
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didCloseWith closeCode: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
  @objc public func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping @Sendable (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc deinit
}
extension NppSignalRModule.EventSourceState : Swift.Equatable {}
extension NppSignalRModule.EventSourceState : Swift.Hashable {}
extension NppSignalRModule.ProtocolType : Swift.Equatable {}
extension NppSignalRModule.ProtocolType : Swift.Hashable {}
extension NppSignalRModule.ProtocolType : Swift.RawRepresentable {}
extension NppSignalRModule.MessageType : Swift.Equatable {}
extension NppSignalRModule.MessageType : Swift.Hashable {}
extension NppSignalRModule.MessageType : Swift.RawRepresentable {}
extension NppSignalRModule.LogLevel : Swift.Equatable {}
extension NppSignalRModule.LogLevel : Swift.Hashable {}
extension NppSignalRModule.LogLevel : Swift.RawRepresentable {}
extension NppSignalRModule.TransferFormat : Swift.Equatable {}
extension NppSignalRModule.TransferFormat : Swift.Hashable {}
extension NppSignalRModule.TransferFormat : Swift.RawRepresentable {}
