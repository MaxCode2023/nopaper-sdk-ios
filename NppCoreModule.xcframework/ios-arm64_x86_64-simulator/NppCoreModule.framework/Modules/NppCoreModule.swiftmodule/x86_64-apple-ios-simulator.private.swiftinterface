// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NppCoreModule
import Foundation
import Swift
import Swinject
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum AvailableSignatureType {
  case kyc
  case mydss
  case kycAndDss
  case none
  public static func == (a: NppCoreModule.AvailableSignatureType, b: NppCoreModule.AvailableSignatureType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.String : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public func removeSpecialCharacters() -> Swift.String
  public func removeDigits() -> Swift.String
}
open class NppCoreModuleAssemblyContainer : Swinject.Assembly {
  public init()
  public func assemble(container: Swinject.Container)
  @objc deinit
}
public protocol SettingRepository {
  func getSettings(path: Swift.String) -> NppCoreModule.Settings?
}
public struct Settings : Swift.Codable {
  public let app: NppCoreModule.App
  public let identityRequestService: NppCoreModule.Identity
  public let signingService: NppCoreModule.Signing
  public let documentApi: NppCoreModule.DocumentConf
  public let profileFl: NppCoreModule.ProfileFl
  public let session: NppCoreModule.SessionSettings
  public let integrationApi: NppCoreModule.Integration
  public let profileUlApi: NppCoreModule.ProfileUl
  public let paycontrol: NppCoreModule.PayControl
  public let ekyc: NppCoreModule.Ekyc
  public let itmApi: NppCoreModule.Itm
  public let myDss: NppCoreModule.MyDss
  public let signalR: NppCoreModule.SignalRConfig
  public let sentryLogOptions: NppCoreModule.SentryLogOptions
  public let monitoring: NppCoreModule.Monitoring
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct App : Swift.Codable {
  public let stand: Swift.String
  public let chatraPublicKey: Swift.String
  public let isDev: Swift.Bool
  public let isTable: Swift.Bool
  public let isDeleteCertificateWithLogout: Swift.Bool
  public let isDeleteCertificateAfterSign: Swift.Bool
  public let isProfileSelectionEnabled: Swift.Bool
  public let isLogoutEnabled: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Identity : Swift.Codable {
  public let identityServerEndpoint: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Signing : Swift.Codable {
  public let myDssEnable: Swift.Bool
  public let payControlEnable: Swift.Bool
  public let signingServiceEndpoint: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DocumentConf : Swift.Codable {
  public let endpoint: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProfileFl : Swift.Codable {
  public let endpoint: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SessionSettings : Swift.Codable {
  public let onSessionCheckTimeLife: Swift.Bool
  public let sessionTimeLife: Swift.Int
  public let sessionMinTime: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Integration : Swift.Codable {
  public let endpoint: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProfileUl : Swift.Codable {
  public let endpoint: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PayControl : Swift.Codable {
  public let endpoint: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Ekyc : Swift.Codable {
  public let mockEnable: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Itm : Swift.Codable {
  public let endpoint: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MyDss : Swift.Codable {
  public let isDev: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SignalRConfig : Swift.Codable {
  public let hubList: [NppCoreModule.HubList]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct HubList : Swift.Codable {
  public let endpoint: Swift.String
  public let name: Swift.String
  public let isEnabled: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SentryLogOptions : Swift.Codable {
  public let dsnKey: Swift.String
  public let sentryLogEnabled: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Monitoring : Swift.Codable {
  public let endpoint: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UISettings {
  public let isProfileSelectionEnabled: Swift.Bool
  public let availableSignatureType: NppCoreModule.AvailableSignatureType
  public let isTable: Swift.Bool
  public let isDeleteCertificateWithLogout: Swift.Bool
  public let isDeleteCertificateAfterSign: Swift.Bool
  public let onSessionCheckTimeLife: Swift.Bool
  public let sessionTimeLife: Swift.Int
  public let sessionMinTime: Swift.Int
  public let isLogoutEnabled: Swift.Bool
}
@objc open class NppCoreModuleDI : ObjectiveC.NSObject {
  public var assemblies: [any Swinject.Assembly]
  public init(parentAssembler: Swinject.Assembler)
  @objc deinit
}
public protocol ConstSDK {
  var STAND: Swift.String { get }
  var INTEGRATION_BASE_URL: Swift.String { get }
  var IDENTITY_SERVER_BASE_URL: Swift.String { get }
  var DOCUMENT_BASE_URL: Swift.String { get }
  var PROFILE_BASE_URL: Swift.String { get }
  var PROFILE_UL_BASE_URL: Swift.String { get }
  var PC_API_BASE_URL: Swift.String { get }
  var SIGNING_SERVICE_BASE_URL: Swift.String { get }
  var ITM_BASE_URL: Swift.String { get }
  var MONITORING_BASE_URL: Swift.String { get }
  var MYDSS_IS_DEV: Swift.Bool { get }
  var PC_MOCK_ENABLED: Swift.Bool { get }
  var PASSWORD_STORAGE: Swift.String { get }
  var KYC_ENABLED: Swift.Bool { get }
  var MYDSS_ENABLED: Swift.Bool { get }
  var CHATRA_KEY: Swift.String { get }
  var IS_DEV: Swift.Bool { get }
  var SENTRY_LOG_ENABLED: Swift.Bool { get }
  var SENTRY_DSN_KEY: Swift.String { get }
  var SIGNALR_CONFIG: NppCoreModule.SignalRConfig { get }
  var PROFILE_SELECTION_ENABLED: Swift.Bool { get }
  var IS_TABLE: Swift.Bool { get }
  var IS_DELETE_CERTIFICATE_WITH_LOGOUT: Swift.Bool { get }
  var IS_DELETE_CERTIFICATE_AFTER_SIGN: Swift.Bool { get }
  var ON_SESSION_CHECK_TIME_LIFE: Swift.Bool { get }
  var SESSION_TIME_LIFE: Swift.Int { get }
  var SESSION_MIN_TIME: Swift.Int { get }
  var IS_LOGOUT_ENABLED: Swift.Bool { get }
  func getUISettings() -> NppCoreModule.UISettings
}
extension Foundation.UserDefaults {
  public func clearData()
}
extension NppCoreModule.AvailableSignatureType : Swift.Equatable {}
extension NppCoreModule.AvailableSignatureType : Swift.Hashable {}
