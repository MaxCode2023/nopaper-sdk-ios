// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NppNetworkModule
import AbSDKMain
import Alamofire
import Foundation
import NppCoreModule
import RxSwift
import Swift
import SwiftKeychainWrapper
import Swinject
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class AuthInteractorImpl : NppNetworkModule.AuthInteractor {
  public func getToken() -> RxSwift.Observable<Swift.String>
  public func getToken(login: Swift.String, password: Swift.String) -> RxSwift.Observable<NppNetworkModule.AuthResponse>
  public func getAccessRefresh(token: Swift.String, userGuid: Swift.String) -> RxSwift.Observable<NppNetworkModule.AccessRefreshResponse>
  public func getAccessRefreshTwoFactor() -> RxSwift.Observable<NppNetworkModule.AccessRefreshResponse>
  public func saveToken(accessToken: Swift.String, refreshToken: Swift.String)
  public func deleteAllLocalTokens()
  public func revokeCurrentRefreshToken() -> RxSwift.Observable<AbSDKMain.VoidCodable>
  @objc deinit
}
public struct AuthError : AbSDKMain.DecodableError {
  public let error: Swift.String
  public let error_description: Swift.String
  public let access_token: Swift.String?
  public let token: Swift.String?
  public let twoFactor: Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
extension Alamofire.Session {
  public func downloadFile(url: Swift.String, method: Alamofire.HTTPMethod, interceptor: (any Alamofire.RequestInterceptor)?) -> RxSwift.Observable<NppNetworkModule.DownloadFileResponse>
}
public protocol AuthRepository {
  func getToken() -> RxSwift.Observable<Swift.String>
  func getToken(login: Swift.String, password: Swift.String) -> RxSwift.Observable<NppNetworkModule.AuthResponse>
  func getAccessRefresh(token: Swift.String, userGuid: Swift.String) -> RxSwift.Observable<NppNetworkModule.AccessRefreshResponse>
  func getAccessRefreshTwoFactor() -> RxSwift.Observable<NppNetworkModule.AccessRefreshResponse>
  func saveToken(accessToken: Swift.String, refreshToken: Swift.String)
  func deleteAll()
  func revokeCurrentRefreshToken() -> RxSwift.Observable<AbSDKMain.VoidCodable>
}
public struct AccessRefresh : Swift.Codable {
  public let access: Swift.String
  public let refresh: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccessRefreshResponse : Swift.Decodable {
  public let access_token: Swift.String
  public let refresh_token: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneTimeLinkResponse : Swift.Codable {
  public let authLink: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
open class SessionManager {
  public var baseUrl: Swift.String
  final public let session: Alamofire.Session
  public init(const: any NppCoreModule.ConstSDK)
  final public func getToken() -> Swift.String
  @_hasMissingDesignatedInitializers public class BaseInterceptor : Alamofire.RequestInterceptor {
    public func adapt(_ urlRequest: Foundation.URLRequest, for session: Alamofire.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
    public func retry(_ request: Alamofire.Request, for session: Alamofire.Session, dueTo error: any Swift.Error, completion: @escaping (Alamofire.RetryResult) -> Swift.Void)
    @objc deinit
  }
  @objc deinit
}
public protocol AuthInteractor {
  func getToken() -> RxSwift.Observable<Swift.String>
  func getToken(login: Swift.String, password: Swift.String) -> RxSwift.Observable<NppNetworkModule.AuthResponse>
  func getAccessRefresh(token: Swift.String, userGuid: Swift.String) -> RxSwift.Observable<NppNetworkModule.AccessRefreshResponse>
  func getAccessRefreshTwoFactor() -> RxSwift.Observable<NppNetworkModule.AccessRefreshResponse>
  func saveToken(accessToken: Swift.String, refreshToken: Swift.String)
  func deleteAllLocalTokens()
  func revokeCurrentRefreshToken() -> RxSwift.Observable<AbSDKMain.VoidCodable>
}
public struct AuthResponse : Swift.Codable {
  public let access_token: Swift.String
  public let expires_in: Swift.Int
  public let token_type: Swift.String?
  public let refresh_token: Swift.String
  public let scope: Swift.String?
  public let loginResponse: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AuthTwoFactorResponse : Swift.Codable {
  public let id_token: Swift.String
  public let access_token: Swift.Int
  public let expires_in: Swift.Int
  public let token_Type: Swift.String?
  public let refresh_token: Swift.String
  public let scope: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DownloadFileResponse {
  public let data: Foundation.Data
  public let fileBase64: Swift.String
  public let contentType: Swift.String
}
open class NppNetworkModuleAssemblyContainer : Swinject.Assembly {
  public init()
  public func assemble(container: Swinject.Container)
  @objc deinit
}
@objc open class NppNetworkModuleDI : ObjectiveC.NSObject {
  public var assemblies: [any Swinject.Assembly]
  public init(parentAssembler: Swinject.Assembler)
  @objc deinit
}
open class AuthRepositoryImpl : NppNetworkModule.AuthRepository {
  public init(const: any NppCoreModule.ConstSDK)
  public func getToken() -> RxSwift.Observable<Swift.String>
  public func getToken(login: Swift.String, password: Swift.String) -> RxSwift.Observable<NppNetworkModule.AuthResponse>
  public func getAccessRefresh(token: Swift.String, userGuid: Swift.String) -> RxSwift.Observable<NppNetworkModule.AccessRefreshResponse>
  public func getAccessRefreshTwoFactor() -> RxSwift.Observable<NppNetworkModule.AccessRefreshResponse>
  public func saveToken(accessToken: Swift.String, refreshToken: Swift.String)
  public func deleteAll()
  public func revokeCurrentRefreshToken() -> RxSwift.Observable<AbSDKMain.VoidCodable>
  @objc deinit
}
