// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NppUIModule
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AbSDKMain
import AbSDKUI
import Alamofire
import Foundation
import LocalAuthentication
import MobileCoreServices
import NppCoreModule
import NppKycModule
import NppMyDSSModule
import NppSDKModule
@_exported import NppUIModule
import PCKYCModule
import PanModal
import Photos
import PromiseKit
import RxCocoa
import RxRelay
import RxSwift
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import myDSSSDK
public struct RecipientItemViewModel : Swift.Equatable {
  public static func == (a: NppUIModule.RecipientItemViewModel, b: NppUIModule.RecipientItemViewModel) -> Swift.Bool
}
public protocol NppEkycScreenDelegate {
  func nppKeyWasInstalled()
  func nppEkycError(error: (any Swift.Error)?)
  func nppKeyAcceptanceAct(certificateId: Swift.String)
  func nppExitWithoutKey()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class RecipientsTableViewController : UIKit.UITableViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableView.Style)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NppUIModule.RecipientsTableViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplayHeaderView view: UIKit.UIView, forSection section: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension NppUIModule.RecipientsTableViewController : UIKit.UISearchBarDelegate, UIKit.UISearchResultsUpdating {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func updateSearchResults(for searchController: UIKit.UISearchController)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func searchBar(_ searchBar: UIKit.UISearchBar, textDidChange searchText: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class DocumentsListTableViewController : UIKit.UITableViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableView.Style)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NppUIModule.DocumentsListTableViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@_hasMissingDesignatedInitializers open class NppUIInteractorImpl : NppUIModule.NppUIInteractor {
  public func goToCabinet(from parentVC: UIKit.UIViewController)
  public func goToDocument(from parentVC: UIKit.UIViewController, documentId: Swift.Int, screenDelegate: any NppUIModule.NppDocumentScreenDelegate)
  public func goToEkyc(from parentVC: UIKit.UIViewController, screenDelegate: any NppUIModule.NppEkycScreenDelegate)
  public func getCabinetViewController() -> NppUIModule.CabinetViewController
  public func getDocumentViewController(documentId: Swift.Int, screenDelegate: any NppUIModule.NppDocumentScreenDelegate) -> NppUIModule.DocumentDetailsViewController
  public func getEkycViewController(screenDelegate: any NppUIModule.NppEkycScreenDelegate) -> NppUIModule.KycStartViewController
  @objc deinit
}
public protocol NppDocumentScreenDelegate {
  func nppActionSuccess(successModel: NppUIModule.SuccessActionModel)
  func nppActionError(error: (any Swift.Error)?)
  func nppExitWithoutAction()
}
public protocol NppUIInteractor {
  func goToCabinet(from parentVC: UIKit.UIViewController)
  func goToDocument(from parentVC: UIKit.UIViewController, documentId: Swift.Int, screenDelegate: any NppUIModule.NppDocumentScreenDelegate)
  func goToEkyc(from parentVC: UIKit.UIViewController, screenDelegate: any NppUIModule.NppEkycScreenDelegate)
  func getCabinetViewController() -> NppUIModule.CabinetViewController
  func getDocumentViewController(documentId: Swift.Int, screenDelegate: any NppUIModule.NppDocumentScreenDelegate) -> NppUIModule.DocumentDetailsViewController
  func getEkycViewController(screenDelegate: any NppUIModule.NppEkycScreenDelegate) -> NppUIModule.KycStartViewController
}
public enum KycStartVCState {
  case defaultStart
  case ftfVerificated
  case fnsCheckFailed
  public static func == (a: NppUIModule.KycStartVCState, b: NppUIModule.KycStartVCState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class RecipientsViewController : UIKit.UIViewController, NppUIModule.StoryboardInstantiable {
  @_Concurrency.MainActor @preconcurrency public static func create(docDetailsInfoViewModel: (any NppUIModule.DocumentDetailsViewModel)?, editRouteViewModel: (any NppUIModule.EditRouteViewModel)?, isUL: Swift.Bool = false) -> NppUIModule.RecipientsViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias T = NppUIModule.RecipientsViewController
  @objc deinit
}
public protocol CreateDocumentViewModel {
  func createDraft(onCompletion: @escaping () -> Swift.Void)
}
public struct DocumentsItemViewModel : Swift.Equatable {
  public static func == (a: NppUIModule.DocumentsItemViewModel, b: NppUIModule.DocumentsItemViewModel) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class KycStartViewController : UIKit.UIViewController, NppUIModule.StoryboardInstantiable, UIKit.UITextViewDelegate {
  @_Concurrency.MainActor @preconcurrency public static func create(state: NppUIModule.KycStartVCState, screenDelegate: (any NppUIModule.NppEkycScreenDelegate)? = nil) -> NppUIModule.KycStartViewController
  @_Concurrency.MainActor @preconcurrency public static func configPassportDescTextViewWithLink(_ textView: UIKit.UITextView, delegate: any UIKit.UITextViewDelegate)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias T = NppUIModule.KycStartViewController
  @objc deinit
}
public struct PhoneContact {
  public let fullName: Swift.String
  public let phone: Swift.String
  public let email: Swift.String
}
public enum TypeFileForLoad {
  case gallery
  case photo
  case filesOnPhone
  public static func == (a: NppUIModule.TypeFileForLoad, b: NppUIModule.TypeFileForLoad) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol KycViewModelInput {
  func verificate(viewController: UIKit.UIViewController, isNew: Swift.Bool)
  func getRequiredSources()
  func createMedia(mediaType: PCKYCModule.PCKYCMediaType, viewController: UIKit.UIViewController)
  func getOCRResults()
  func approveOCRResults(isApproved: Swift.Bool)
  func deleteSession()
}
public protocol KycViewModelOutput {
  var status: RxSwift.PublishSubject<PCKYCModule.PCKYCSessionStatus.Status?> { get }
  var statusDescription: Swift.String { get }
  var requiredSources: RxSwift.PublishSubject<Swift.Set<PCKYCModule.PCKYCMediaType>> { get }
  var requiredSourcesSet: Swift.Set<PCKYCModule.PCKYCMediaType> { get }
  var ocrResults: RxSwift.PublishSubject<NppKycModule.OCRResults?> { get }
  var isLoading: RxSwift.PublishSubject<Swift.Bool> { get }
  var mainTextStatus: RxSwift.PublishSubject<Swift.String> { get }
}
public protocol KycViewModel : NppUIModule.KycViewModelInput, NppUIModule.KycViewModelOutput {
}
public struct RouterItemViewModel : Swift.Equatable {
  public static func == (a: NppUIModule.RouterItemViewModel, b: NppUIModule.RouterItemViewModel) -> Swift.Bool
}
public protocol NppSDKCustomization {
  func setButtonPrimaryStyle(backgroundColor: CoreGraphics.CGColor?, border: NppUIModule.NppBorderStyle?, textColor: UIKit.UIColor?, textSize: CoreFoundation.CGFloat?)
  func setButtonSecondaryStyle(backgroundColor: CoreGraphics.CGColor?, border: NppUIModule.NppBorderStyle?, textColor: UIKit.UIColor?, textSize: CoreFoundation.CGFloat?)
  func setFonts(regular: Swift.String, medium: Swift.String, semiBold: Swift.String, bold: Swift.String)
  func setToolbarStyle(backgoundColor: UIKit.UIColor?, titleColor: UIKit.UIColor?, backButtonImageString: Swift.String?, titleSize: CoreFoundation.CGFloat?)
}
public enum TypeAction {
  case mainAction
  case availableAction
  public static func == (a: NppUIModule.TypeAction, b: NppUIModule.TypeAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class NppSDKStyle {
  public static var sdkCustomization: (any NppUIModule.NppSDKCustomization)!
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class NppButtonPrimary : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency public static var backgroundColor: CoreGraphics.CGColor
  @_Concurrency.MainActor @preconcurrency public static var border: NppUIModule.NppBorderStyle
  @_Concurrency.MainActor @preconcurrency public static var textColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public static var textSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepareForInterfaceBuilder()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func setTitle(_ title: Swift.String?, for state: UIKit.UIControl.State)
  @objc deinit
}
public struct NppBorderStyle {
  public init(borderWidth: CoreFoundation.CGFloat?, borderColors: CoreGraphics.CGColor?, cornerRadius: CoreFoundation.CGFloat?)
}
public enum FormDssType : Swift.Int {
  case form1
  case form2
  case dataCorrection
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol KycCabinetViewModelInput {
  func updateStatusInstallkey(onCompletion: @escaping () -> Swift.Void, onFailure: @escaping (Swift.String?) -> Swift.Void)
  func getKeyAcceptanceAct(onCompletion: @escaping (Swift.String) -> Swift.Void, onFailure: @escaping (Swift.String?) -> Swift.Void)
  func acceptKeyAcceptanceAct(onCompletion: @escaping () -> Swift.Void, onFailure: @escaping (Swift.String?) -> Swift.Void)
}
public protocol KycCabinetViewModelOutput {
}
public protocol KycCabinetViewModel : NppUIModule.KycCabinetViewModelInput, NppUIModule.KycCabinetViewModelOutput {
}
public protocol StoryboardInstantiable : ObjectiveC.NSObjectProtocol {
  associatedtype T
  static var defaultFileName: Swift.String { get }
  static func instantiateViewController(_ bundle: Foundation.Bundle?, storyboardName: Swift.String?) -> Self.T
}
extension NppUIModule.StoryboardInstantiable where Self : UIKit.UIViewController {
  public static var defaultFileName: Swift.String {
    get
  }
  public static func instantiateViewController(_ bundle: Foundation.Bundle? = Bundle(identifier: "Acommerce.NppUIModule"), storyboardName: Swift.String? = "") -> Self
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CertificateListViewController : UIKit.UIViewController, NppUIModule.StoryboardInstantiable {
  @_Concurrency.MainActor @preconcurrency public static func create() -> NppUIModule.CertificateListViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias T = NppUIModule.CertificateListViewController
  @objc deinit
}
extension NppUIModule.CertificateListViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
public struct LoadedImageModel {
}
public protocol SmsApproveViewModelInput {
  func sendCode()
  func verifyCode(code: Swift.String, onSuccessVerified: @escaping () -> Swift.Void, onCompletion: @escaping () -> Swift.Void)
}
public protocol SmsApproveViewModelOutput {
  var sendCodeInfo: RxSwift.PublishSubject<NppSDKModule.ConfirmOperationSendResponse> { get }
  var attemptsLeft: RxSwift.PublishSubject<Swift.Int> { get }
  var error: RxSwift.PublishSubject<any Swift.Error> { get }
}
public protocol SmsApproveViewModel : NppUIModule.SmsApproveViewModelInput, NppUIModule.SmsApproveViewModelOutput {
}
@_hasMissingDesignatedInitializers public class DefaultSmsApproveViewModel : NppUIModule.SmsApproveViewModel {
  public var sendCodeInfo: RxSwift.PublishSubject<NppSDKModule.ConfirmOperationSendResponse>
  public var attemptsLeft: RxSwift.PublishSubject<Swift.Int>
  public var error: RxSwift.PublishSubject<any Swift.Error>
  public func sendCode()
  public func verifyCode(code: Swift.String, onSuccessVerified: @escaping () -> Swift.Void, onCompletion: @escaping () -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NppSDKCustomizationImpl : NppUIModule.NppSDKCustomization {
  public func setButtonPrimaryStyle(backgroundColor: CoreGraphics.CGColor?, border: NppUIModule.NppBorderStyle?, textColor: UIKit.UIColor?, textSize: CoreFoundation.CGFloat?)
  public func setButtonSecondaryStyle(backgroundColor: CoreGraphics.CGColor?, border: NppUIModule.NppBorderStyle?, textColor: UIKit.UIColor?, textSize: CoreFoundation.CGFloat?)
  public func setFonts(regular: Swift.String, medium: Swift.String, semiBold: Swift.String, bold: Swift.String)
  public func setToolbarStyle(backgoundColor: UIKit.UIColor?, titleColor: UIKit.UIColor?, backButtonImageString: Swift.String?, titleSize: CoreFoundation.CGFloat?)
  @objc deinit
}
public protocol LoadFilesViewModelInput {
  func loadFile(fileBase64: Swift.String, nameWithExtension: Swift.String, onCompletion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  func deleteLoadedFile(fileId: Swift.String, index: Swift.Int)
  func clickFile(index: Swift.Int, onCompletion: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  func renameDocument(index: Swift.Int, newName: Swift.String)
  func createPDFFromLocalDocuments() -> Swift.String?
  var isShowDocPicker: Swift.Bool { get set }
}
public protocol LoadFilesViewModelOutput {
  var items: RxRelay.BehaviorRelay<[NppUIModule.LoadFilesItemViewModel]> { get }
  var localItems: RxRelay.BehaviorRelay<[NppUIModule.LoadFilesItemViewModel]> { get }
  var documents: [NppUIModule.LoadedImageModel] { get set }
  var isMergeInOneDoc: Swift.Bool { get set }
}
public protocol LoadFilesViewModel : NppUIModule.LoadFilesViewModelInput, NppUIModule.LoadFilesViewModelOutput {
}
@_hasMissingDesignatedInitializers public class BaseLoadFilesViewModel : NppUIModule.LoadFilesViewModel {
  public var documents: [NppUIModule.LoadedImageModel]
  public var localDocuments: [NppUIModule.LoadedImageModel]
  public var isLocalDocListEmpty: Swift.Bool {
    get
  }
  public var isLoadingFiles: Swift.Bool
  public var items: RxRelay.BehaviorRelay<[NppUIModule.LoadFilesItemViewModel]>
  public var localItems: RxRelay.BehaviorRelay<[NppUIModule.LoadFilesItemViewModel]>
  public var isEmpty: Swift.Bool {
    get
  }
  public var isLocalEmpty: Swift.Bool {
    get
  }
  public var isShowDocPicker: Swift.Bool
  public var isMergeInOneDoc: Swift.Bool
  public func appendDoc(_ documents: [NppUIModule.LoadedImageModel])
  public func loadFile(fileBase64: Swift.String, nameWithExtension: Swift.String, onCompletion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public func deleteLoadedFile(fileId: Swift.String, index: Swift.Int)
  public func clickFile(index: Swift.Int, onCompletion: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  public func addLocalFile(document: NppUIModule.LoadedImageModel)
  public func deleteAllLocalFiles()
  public func deleteLocalDocument(index: Swift.Int)
  public func renameDocument(index: Swift.Int, newName: Swift.String)
  public func createPDFFromLocalDocuments() -> Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CreateDocumentLoadFilesViewModel : NppUIModule.BaseLoadFilesViewModel {
  override public func loadFile(fileBase64: Swift.String, nameWithExtension: Swift.String, onCompletion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  override public func deleteLoadedFile(fileId: Swift.String, index: Swift.Int)
  override public func clickFile(index: Swift.Int, onCompletion: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MyDSSLoadFilesViewModel : NppUIModule.BaseLoadFilesViewModel {
  override public func loadFile(fileBase64: Swift.String, nameWithExtension: Swift.String, onCompletion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  override public func deleteLoadedFile(fileId: Swift.String, index: Swift.Int)
  override public func clickFile(index: Swift.Int, onCompletion: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  @objc deinit
}
public protocol RecipientViewModelInput {
  func getRecipientList(type: NppSDKModule.RecipientType)
  func getContactsList()
  func getCompanySuggestInfoList(suggestInfo: Swift.String, onCompletion: @escaping () -> Swift.Void)
  func getRecipientIndex(at index: Swift.Int) -> NppSDKModule.Recipient
  func getContactIndex(at index: Swift.Int) -> NppUIModule.PhoneContact
  func getCompanyListIndex(at index: Swift.Int) -> NppSDKModule.CompanySuggestInfo
  func findProfileByPhoneNumber(phoneNumber: Swift.String, onCompletion: @escaping (NppSDKModule.FindUserModel?) -> Swift.Void)
  func createRecipientFL(userGuid: Swift.String, phoneNumber: Swift.String?, onCompletion: @escaping (NppSDKModule.Recipient) -> Swift.Void)
  func createRecipientUL(userGuid: Swift.String, companyInn: Swift.String?, companyKpp: Swift.String?, companyId: Swift.Int?, onCompletion: @escaping (NppSDKModule.Recipient) -> Swift.Void)
  func searchCompany(inn: Swift.String, kpp: Swift.String, onCompletion: @escaping (Swift.Result<NppSDKModule.SearchCompanyList?, any Swift.Error>) -> Swift.Void)
}
public protocol RecipientViewModelOutput {
  var itemsRecipients: RxRelay.BehaviorRelay<[NppUIModule.RecipientItemViewModel]> { get }
  var itemsContacts: RxRelay.BehaviorRelay<[NppUIModule.RecipientItemViewModel]> { get }
  var itemsCompanyList: RxRelay.BehaviorRelay<[NppUIModule.RecipientItemViewModel]> { get }
  var isRecipientsEmpty: Swift.Bool { get }
  var isContactsEmpty: Swift.Bool { get }
  var isRecipientsListEmpty: Swift.Bool { get }
  var isContactsListEmpty: Swift.Bool { get }
  var parentSigningPartyId: Swift.Int? { get set }
  var isOnlyINN: RxSwift.BehaviorSubject<Swift.Bool> { get set }
  var isUL: Swift.Bool { get set }
}
public protocol RecipientViewModel : NppUIModule.RecipientViewModelInput, NppUIModule.RecipientViewModelOutput {
}
@_hasMissingDesignatedInitializers final public class DefaultRecipientViewModel : NppUIModule.RecipientViewModel {
  final public var parentSigningPartyId: Swift.Int?
  final public var isRecipientsListEmpty: Swift.Bool
  final public var isContactsListEmpty: Swift.Bool
  final public var isCompanyListEmpty: Swift.Bool
  final public let itemsRecipients: RxRelay.BehaviorRelay<[NppUIModule.RecipientItemViewModel]>
  final public var isRecipientsEmpty: Swift.Bool {
    get
  }
  final public let itemsContacts: RxRelay.BehaviorRelay<[NppUIModule.RecipientItemViewModel]>
  final public var isContactsEmpty: Swift.Bool {
    get
  }
  final public let itemsCompanyList: RxRelay.BehaviorRelay<[NppUIModule.RecipientItemViewModel]>
  final public var isCompaniesEmpty: Swift.Bool {
    get
  }
  final public var isOnlyINN: RxSwift.BehaviorSubject<Swift.Bool>
  final public var isUL: Swift.Bool
  @objc deinit
}
extension NppUIModule.DefaultRecipientViewModel {
  final public func getRecipientList(type: NppSDKModule.RecipientType)
  final public func getContactsList()
  final public func getCompanySuggestInfoList(suggestInfo: Swift.String, onCompletion: @escaping () -> Swift.Void)
  final public func getRecipientIndex(at index: Swift.Int) -> NppSDKModule.Recipient
  final public func getContactIndex(at index: Swift.Int) -> NppUIModule.PhoneContact
  final public func getCompanyListIndex(at index: Swift.Int) -> NppSDKModule.CompanySuggestInfo
  final public func findProfileByPhoneNumber(phoneNumber: Swift.String, onCompletion: @escaping (NppSDKModule.FindUserModel?) -> Swift.Void)
  final public func searchCompany(inn: Swift.String, kpp: Swift.String, onCompletion: @escaping (Swift.Result<NppSDKModule.SearchCompanyList?, any Swift.Error>) -> Swift.Void)
  final public func createRecipientFL(userGuid: Swift.String, phoneNumber: Swift.String?, onCompletion: @escaping (NppSDKModule.Recipient) -> Swift.Void)
  final public func createRecipientUL(userGuid: Swift.String, companyInn: Swift.String?, companyKpp: Swift.String?, companyId: Swift.Int?, onCompletion: @escaping (NppSDKModule.Recipient) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class NavigationViewController : UIKit.UIViewController, NppUIModule.StoryboardInstantiable {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias T = NppUIModule.NavigationViewController
  @objc deinit
}
extension NppUIModule.NavigationViewController : NppUIModule.CabinetViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency public func finishSDK()
}
public protocol LoadFileProtocol {
  func goToAddDocumentScreen(viewModel: NppUIModule.BaseLoadFilesViewModel, typeFile: NppUIModule.TypeFileForLoad)
  func goToPDFPreviewerScreen(viewModel: NppUIModule.BaseLoadFilesViewModel)
  func goToFilesOnPhone()
}
public struct EditRouteItemViewModel : Swift.Equatable {
  public static func == (a: NppUIModule.EditRouteItemViewModel, b: NppUIModule.EditRouteItemViewModel) -> Swift.Bool
}
public struct LoadFilesItemViewModel : Swift.Equatable {
  public static func == (a: NppUIModule.LoadFilesItemViewModel, b: NppUIModule.LoadFilesItemViewModel) -> Swift.Bool
}
public protocol EditRouteViewModelInput {
  func createDraft(onCompletion: @escaping () -> Swift.Void)
  func getDocumentDetails()
  func createSigningParty()
  func editActionTypeSigningParty(signingPartyId: Swift.Int, actionType: NppSDKModule.ActionType, signType: NppSDKModule.SignType)
  func editQueueTypeSigningParty(signingParty: Swift.Int, queueType: NppSDKModule.QueueType)
  func editOrderSigningParty(signingPartyId: Swift.Int, childSigningPartyList: Swift.Array<NppSDKModule.SigningPartyWithOrder>)
  func changeSigningPartyRoute(signingPartyId: Swift.Int, isDisableChange: Swift.Bool)
}
public protocol EditRouteViewModelOutput {
  var items: RxRelay.BehaviorRelay<[NppUIModule.EditRouteItemViewModel]> { get }
  var documentDetails: RxSwift.BehaviorSubject<NppSDKModule.DocumentDetails?> { get }
  var signingPartyId: RxSwift.BehaviorSubject<Swift.Int?> { get set }
  var isEmptyRoute: Swift.Bool { get }
  var recipientId: Swift.Int { get set }
  var choosedActionType: NppSDKModule.ActionType? { get set }
  static var isSequentialQueueType: Swift.Bool { get set }
  static var parentSigningPartyId: Swift.Int? { get set }
  static var documentId: Swift.Int? { get set }
  static var isDraftCreated: Swift.Bool { get set }
  static var isEdited: Swift.Bool { get set }
}
public protocol EditRouteViewModel : NppUIModule.EditRouteViewModelInput, NppUIModule.EditRouteViewModelOutput {
}
public class DefaultEditRouteViewModel : NppUIModule.EditRouteViewModel {
  public static var isEdited: Swift.Bool
  public static var parentSigningPartyId: Swift.Int?
  public static var documentId: Swift.Int?
  public static var isDraftCreated: Swift.Bool
  public static var isSequentialQueueType: Swift.Bool
  public static var indexOfActiveUser: Swift.Int
  public var items: RxRelay.BehaviorRelay<[NppUIModule.EditRouteItemViewModel]>
  public var documentDetails: RxSwift.BehaviorSubject<NppSDKModule.DocumentDetails?>
  public var isEmptyRoute: Swift.Bool {
    get
  }
  public var choosedActionType: NppSDKModule.ActionType?
  public var signingPartyId: RxSwift.BehaviorSubject<Swift.Int?>
  public var recipientId: Swift.Int
  public init(recipientId: Swift.Int, parentSigningPartyId: Swift.Int?)
  public init(parentSigningPartyId: Swift.Int?)
  @objc deinit
}
extension NppUIModule.DefaultEditRouteViewModel {
  public func createDraft(onCompletion: @escaping () -> Swift.Void)
  public func createSigningParty()
  public func editActionTypeSigningParty(signingPartyId: Swift.Int, actionType: NppSDKModule.ActionType, signType: NppSDKModule.SignType)
  public func editQueueTypeSigningParty(signingParty: Swift.Int, queueType: NppSDKModule.QueueType)
  public func editOrderSigningParty(signingPartyId: Swift.Int, childSigningPartyList: Swift.Array<NppSDKModule.SigningPartyWithOrder>)
  public func changeSigningPartyRoute(signingPartyId: Swift.Int, isDisableChange: Swift.Bool)
  public func getDocumentDetails()
}
public struct SuccessActionModel {
  public let actionType: NppSDKModule.ActionType?
  public let signType: NppSDKModule.SignType?
}
@_hasMissingDesignatedInitializers public class LoaderWaitingActivateViewModel {
  @objc deinit
}
public struct PartnerPointItemViewModel : Swift.Equatable {
  public static func == (a: NppUIModule.PartnerPointItemViewModel, b: NppUIModule.PartnerPointItemViewModel) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class NppUI {
  public static var shared: NppUIModule.NppUI
  public static var uiInteractor: (any NppUIModule.NppUIInteractor)!
  public static func create() -> any NppUIModule.NppUIInteractor
  public static func setLogLevel(logLevel: AbSDKMain.AbLogLevel)
  @objc deinit
}
public protocol CabinetViewControllerDelegate : AnyObject {
  func finishSDK()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CabinetViewController : UIKit.UIViewController, NppUIModule.StoryboardInstantiable {
  @_Concurrency.MainActor @preconcurrency public static func create() -> NppUIModule.CabinetViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias T = NppUIModule.CabinetViewController
  @objc deinit
}
extension NppUIModule.CabinetViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldBeRequiredToFailBy otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
public protocol DocumentDetailsViewModelInput {
  func getSigningPartyIndex(at index: Swift.Int) -> NppSDKModule.SigningPartyInfo?
  func getDocumentDetails(onCompletion: ((Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)?)
  func getDocumentFile(at fileId: Swift.String)
  func loadFile(_ fileId: Swift.String, onCompletion: @escaping (Swift.Result<NppSDKModule.DocumentFile, Swift.String>) -> Swift.Void)
  func viewDidDisappear()
  func setStatus(documentDetails: NppSDKModule.DocumentDetails?) -> Swift.String
  func setColorWorkflowType(documentDetails: NppSDKModule.DocumentDetails?) -> UIKit.UIColor
  func setNameDocumentPackage(documentId: Swift.Int, title: Swift.String)
}
public protocol DocumentDetailsViewModelOutput {
  var itemsRouter: RxRelay.BehaviorRelay<[NppUIModule.RouterItemViewModel]> { get }
  var itemsDocuments: RxRelay.BehaviorRelay<[NppUIModule.DocumentsItemViewModel]> { get }
  var documentDetails: RxSwift.BehaviorSubject<NppSDKModule.DocumentDetails?> { get }
  var documentFile: RxSwift.PublishSubject<NppSDKModule.DocumentFile> { get }
  var loading: RxSwift.PublishSubject<Swift.Bool> { get }
  var isEmptyRouter: Swift.Bool { get }
  var isEmptyDocuments: Swift.Bool { get }
  var id: Swift.Int { get set }
  var fileId: Swift.Int { get set }
}
public protocol DocumentDetailsViewModel : NppUIModule.DocumentDetailsViewModelInput, NppUIModule.DocumentDetailsViewModelOutput {
}
public class DefaultDocumentDetailsViewModel : NppUIModule.DocumentDetailsViewModel {
  public var isEmptyRouter: Swift.Bool {
    get
  }
  public var isEmptyDocuments: Swift.Bool {
    get
  }
  final public let itemsRouter: RxRelay.BehaviorRelay<[NppUIModule.RouterItemViewModel]>
  final public let itemsDocuments: RxRelay.BehaviorRelay<[NppUIModule.DocumentsItemViewModel]>
  final public let documentDetails: RxSwift.BehaviorSubject<NppSDKModule.DocumentDetails?>
  final public let documentFile: RxSwift.PublishSubject<NppSDKModule.DocumentFile>
  final public let loading: RxSwift.PublishSubject<Swift.Bool>
  public var id: Swift.Int
  public var fileId: Swift.Int
  public init(document: NppSDKModule.Document)
  public init(documentId: Swift.Int)
  @objc deinit
}
extension NppUIModule.DefaultDocumentDetailsViewModel {
  public func getSigningPartyIndex(at index: Swift.Int) -> NppSDKModule.SigningPartyInfo?
  public func getDocumentFile(at fileId: Swift.String)
  public func loadFile(_ fileId: Swift.String, onCompletion: @escaping (Swift.Result<NppSDKModule.DocumentFile, Swift.String>) -> Swift.Void)
  public func getDocumentDetails(onCompletion: ((Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? = nil)
  public func setNameDocumentPackage(documentId: Swift.Int, title: Swift.String)
  public func viewDidDisappear()
  public func setStatus(documentDetails: NppSDKModule.DocumentDetails?) -> Swift.String
  public func setColorWorkflowType(documentDetails: NppSDKModule.DocumentDetails?) -> UIKit.UIColor
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class InitialsView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public func setInitialsText(text: Swift.String, cornerRadius: CoreFoundation.CGFloat = 24, iconSize: CoreFoundation.CGFloat = 24, fontSize: CoreFoundation.CGFloat = 18)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol CabinetViewModelInput {
  func getAllDocuments()
  func getDocumentIndex(at index: Swift.Int) -> NppSDKModule.Document
  func checkCertificateOnDevice()
  func checkExternalDssCertificate()
  func getCertificate(certificateId: Swift.String?, onCompletion: @escaping (NppSDKModule.Certificate) -> Swift.Void)
  func verificate()
}
public protocol CabinetViewModelOutput {
  var items: RxRelay.BehaviorRelay<[NppUIModule.DocumentsListItemViewModel]> { get }
  var isEmpty: Swift.Bool { get }
  var isDocumenstListEmpty: RxSwift.BehaviorSubject<Swift.Bool> { get set }
  var isDssCertificateOnDevice: RxSwift.PublishSubject<Swift.Bool?> { get set }
  var dssCertificate: RxSwift.PublishSubject<NppSDKModule.Certificate?> { get set }
  var loading: RxSwift.PublishSubject<Swift.Bool> { get set }
  var statusKey: RxSwift.PublishSubject<NppUIModule.StatusKeyModel> { get set }
}
public protocol CabinetViewModel : NppUIModule.CabinetViewModelInput, NppUIModule.CabinetViewModelOutput {
}
@_hasMissingDesignatedInitializers final public class DefaultCabinetViewModel : NppUIModule.CabinetViewModel {
  final public var isDocumenstListEmpty: RxSwift.BehaviorSubject<Swift.Bool>
  final public var loading: RxSwift.PublishSubject<Swift.Bool>
  final public let items: RxRelay.BehaviorRelay<[NppUIModule.DocumentsListItemViewModel]>
  final public var isEmpty: Swift.Bool {
    get
  }
  final public var isDssCertificateOnDevice: RxSwift.PublishSubject<Swift.Bool?>
  final public var dssCertificate: RxSwift.PublishSubject<NppSDKModule.Certificate?>
  final public var statusKey: RxSwift.PublishSubject<NppUIModule.StatusKeyModel>
  @objc deinit
}
extension NppUIModule.DefaultCabinetViewModel {
  final public func getAllDocuments()
  final public func getDocumentIndex(at index: Swift.Int) -> NppSDKModule.Document
  final public func checkCertificateOnDevice()
  final public func checkExternalDssCertificate()
  final public func getCertificate(certificateId: Swift.String?, onCompletion: @escaping (NppSDKModule.Certificate) -> Swift.Void)
  final public func verificate()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class SettingsViewController : UIKit.UIViewController, NppUIModule.StoryboardInstantiable {
  @_Concurrency.MainActor @preconcurrency public static func create() -> NppUIModule.SettingsViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias T = NppUIModule.SettingsViewController
  @objc deinit
}
public struct RegionItemViewModel : Swift.Equatable {
  public static func == (a: NppUIModule.RegionItemViewModel, b: NppUIModule.RegionItemViewModel) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class DocumentDetailsViewController : UIKit.UIViewController, NppUIModule.StoryboardInstantiable, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency public static func create(with viewModel: any NppUIModule.DocumentDetailsViewModel, screenDelegate: (any NppUIModule.NppDocumentScreenDelegate)? = nil) -> NppUIModule.DocumentDetailsViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias T = NppUIModule.DocumentDetailsViewController
  @objc deinit
}
extension NppUIModule.DocumentDetailsViewController : UIKit.UIPopoverPresentationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adaptivePresentationStyle(for controller: UIKit.UIPresentationController) -> UIKit.UIModalPresentationStyle
}
public enum MyDssPage : Swift.String {
  case form
  case passportForm
  case payment
  case choosePlace
  case identification
  case certificateIssue
  case certificateInstall
  case external
  case final
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @available(iOS 14.0, *)
@_Concurrency.MainActor @preconcurrency public class ProfileViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func addingZoomOnTap(duration: Foundation.TimeInterval = 0.1, destinationScaleFactor: CoreFoundation.CGFloat = 1.1) -> some SwiftUICore.View
  
}
public class StatusKeyModel {
  public var status: AbSDKMain.TaskStatus?
  public var description: Swift.String?
  public var keyId: Swift.String?
  public init(status: AbSDKMain.TaskStatus?, keyId: Swift.String? = nil, description: Swift.String? = "")
  @objc deinit
}
public struct DocumentsListItemViewModel : Swift.Equatable {
  public static func == (a: NppUIModule.DocumentsListItemViewModel, b: NppUIModule.DocumentsListItemViewModel) -> Swift.Bool
}
public protocol AgreementListViewModelInput {
  func getAgreementList(onCompletion: @escaping (NppSDKModule.AgreementList?) -> Swift.Void)
  func acceptAgreementList(onCompletion: @escaping () -> Swift.Void)
  func checkExternalCertificate()
  func getActiveProfile() -> any NppSDKModule.Profile
}
public protocol AgreementListViewModelOutput {
  var agreementList: Swift.Array<NppSDKModule.Agreement> { get }
  var isLoading: RxSwift.BehaviorSubject<Swift.Bool> { get }
  var companyName: RxSwift.BehaviorSubject<Swift.String> { get }
}
public protocol AgreementListViewModel : NppUIModule.AgreementListViewModelInput, NppUIModule.AgreementListViewModelOutput {
}
@_hasMissingDesignatedInitializers public class DefaultAgreementViewModel : NppUIModule.AgreementListViewModel {
  public var isLoading: RxSwift.BehaviorSubject<Swift.Bool>
  public var companyName: RxSwift.BehaviorSubject<Swift.String>
  public var agreementList: [NppSDKModule.Agreement]
  public func getAgreementList(onCompletion: @escaping (NppSDKModule.AgreementList?) -> Swift.Void)
  public func acceptAgreementList(onCompletion: @escaping () -> Swift.Void)
  public func checkExternalCertificate()
  public func getActiveProfile() -> any NppSDKModule.Profile
  @objc deinit
}
extension NppUIModule.KycStartVCState : Swift.Equatable {}
extension NppUIModule.KycStartVCState : Swift.Hashable {}
extension NppUIModule.TypeFileForLoad : Swift.Equatable {}
extension NppUIModule.TypeFileForLoad : Swift.Hashable {}
extension NppUIModule.TypeAction : Swift.Equatable {}
extension NppUIModule.TypeAction : Swift.Hashable {}
extension NppUIModule.FormDssType : Swift.Equatable {}
extension NppUIModule.FormDssType : Swift.Hashable {}
extension NppUIModule.FormDssType : Swift.RawRepresentable {}
extension NppUIModule.MyDssPage : Swift.Equatable {}
extension NppUIModule.MyDssPage : Swift.Hashable {}
extension NppUIModule.MyDssPage : Swift.RawRepresentable {}
